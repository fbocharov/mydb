%{

#include <string>
#include <vector>
#include <utility>
#include <cstddef>

#include "SQLStatement.h"
#include "SQLParserException.h"

void yyerror(const char *s) {}
int yywrap() { return 1; }
int yyparse(void);
int yylex(void);

extern ISQLStatement * parsedStatement;

%}

%debug

%token SELECT
%token FROM
%token INSERT
%token INTO
%token VALUES
%token CREATE
%token INT
%token FLOAT
%token VARCHAR
%token TABLE
%token EXIT
%token <string_v> IDENTIFIER
%token UNKNOWN_TOKEN

%union{
    char * string_v;
    std::vector<std::string> * s_vector;
    std::vector<std::pair<std::string, std::string>> * nt_vector;
    std::nullptr_t nulltype;
    SelectStatement * select_statement;
    CreateStatement * create_table_statement;
    InsertStatement * insert_statement;
    ISQLStatement   * statement;
}

%type <nt_vector> NT_VECTOR
%type <s_vector> S_FIELDS
%type <s_vector> I_FIELDS
%type <select_statement> SELECT_S
%type <create_table_statement> CREATE_T_S
%type <insert_statement> INSERT_S
%type <nulltype> EXIT_S
%type <statement> STATEMENT

%destructor { delete $$; } <string_v>
%destructor { delete $$; } <s_vector>
%destructor { delete $$; } <nt_vector>
%destructor { delete $$; } <select_statement>
%destructor { delete $$; } <create_table_statement>
%destructor { delete $$; } <insert_statement>


%start STATEMENT

%%
NT_VECTOR   : IDENTIFIER INT  ','  NT_VECTOR   { $$ = new std::vector<std::pair<std::string, std::string>>(1, {$1, "INT"});
                                                   $$->insert($$->end(), $4->begin(), $4->end()); }
            | IDENTIFIER FLOAT ',' NT_VECTOR   { $$ = new std::vector<std::pair<std::string, std::string>>(1, {$1, "FLOAT"});
                                                   $$->insert($$->end(), $4->begin(), $4->end()); }
            | IDENTIFIER VARCHAR ',' NT_VECTOR { $$ = new std::vector<std::pair<std::string, std::string>>(1, {$1, "VARCHAR"});
                                                   $$->insert($$->end(), $4->begin(), $4->end()); }
            | IDENTIFIER INT                     { $$ = new std::vector<std::pair<std::string, std::string>>(1, {$1, "INT"});     }
            | IDENTIFIER FLOAT                   { $$ = new std::vector<std::pair<std::string, std::string>>(1, {$1, "FLOAT"});   }
            | IDENTIFIER VARCHAR                 { $$ = new std::vector<std::pair<std::string, std::string>>(1, {$1, "VARCHAR"}); }
            ;
CREATE_T_S  : CREATE TABLE IDENTIFIER '(' NT_VECTOR ')'         { $$ = new CreateStatement($3, *$5); delete $5; }
            ;
S_FIELDS    : '*'                                              { $$ = new std::vector<std::string>(); }
            ;
SELECT_S    : SELECT S_FIELDS FROM IDENTIFIER                   { $$ = new SelectStatement($4, *$2); delete $2; }
            ;
I_FIELDS    : IDENTIFIER                   { $$ = new std::vector<std::string>(1, $1); }
            | IDENTIFIER ',' I_FIELDS    { $$ = new std::vector<std::string>(1, $1); $$->insert($$->end(), $3->begin(), $3->end()); }
            ;
INSERT_S    : INSERT INTO IDENTIFIER VALUES '(' I_FIELDS ')'    { $$ = new InsertStatement($3, *$6); delete $6; }
            ;
EXIT_S      : EXIT { $$ = nullptr; }
            ;
STATEMENT   : SELECT_S ';'    { parsedStatement = $1; $$ = parsedStatement; }
            | INSERT_S ';'    { parsedStatement = $1; $$ = parsedStatement; }
            | CREATE_T_S ';'  { parsedStatement = $1; $$ = parsedStatement; }
            | EXIT_S          { parsedStatement = $1; $$ = parsedStatement; }
            ;
%%
