%{

#include <string>
#include <vector>
#include <cstddef>
#include <cstring>

#include "../common/Common.h"
#include "../common/Condition.h"

#include "SQLStatement.h"
#include "SQLParserException.h"

void yyerror(const char *s) {}
int yywrap() { return 1; }
int yyparse(void);
int yylex(void);

extern ISQLStatement * parsedStatement;

%}

%debug

%token SELECT
%token FROM
%token INSERT
%token INTO
%token VALUES
%token UPDATE
%token SET
%token DELETE
%token WHERE
%token AND
%token CREATE
%token TABLE
%token INDEX
%token UNIQUE
%token ON
%token USING
%token BTREE
%token INT
%token DOUBLE
%token VARCHAR
%token EXIT
%token <string_v> OP
%token <string_v> INT_NUM
%token <string_v> DOUBLE_NUM
%token <string_v> WORD
%token <string_v> IDENTIFIER
%token UNKNOWN_TOKEN

%union{
    char * string_v;
    std::vector<std::string> * s_vector;
    Values * values_vector;
    std::vector<Condition> * cond_vector;
    ColumnDescriptors * nt_vector;
    std::nullptr_t nulltype;
    SelectStatement * select_statement;
    CreateTableStatement * create_table_statement;
    CreateIndexStatement * create_index_statement;
    InsertStatement * insert_statement;
    DeleteStatement * delete_statement;
    ISQLStatement   * statement;
}

%type <nt_vector> NT_VECTOR
%type <cond_vector> COND_VECTOR
%type <s_vector> COL_VECTOR
%type <s_vector> S_FIELDS
%type <values_vector> I_FIELDS
%type <select_statement> SELECT_S
%type <create_table_statement> CREATE_T_S
%type <create_index_statement> CREATE_I_S
%type <insert_statement> INSERT_S
%type <delete_statement> DELETE_S
%type <nulltype> EXIT_S
%type <statement> STATEMENT


%destructor { free($$);  } <string_v>
%destructor { delete $$; } <s_vector>
%destructor { delete $$; } <values_vector>
%destructor { delete $$; } <nt_vector>
%destructor { delete $$; } <select_statement>
%destructor { delete $$; } <create_table_statement>
%destructor { delete $$; } <create_index_statement>
%destructor { delete $$; } <insert_statement>
%destructor { delete $$; } <delete_statement>


%start STATEMENT

%%
NT_VECTOR   : IDENTIFIER INT  ','  NT_VECTOR  { $$ = new std::vector<ColumnDescriptor>(1, ColumnDescriptor($1, ValueType::INT, 9));
                                                $$->insert($$->end(), $4->begin(), $4->end()); free($1); }
            | IDENTIFIER DOUBLE ',' NT_VECTOR { $$ = new std::vector<ColumnDescriptor>(1, ColumnDescriptor($1, ValueType::DOUBLE, 10));
                                                $$->insert($$->end(), $4->begin(), $4->end()); free($1); }
            | IDENTIFIER VARCHAR '(' INT_NUM ')' ',' NT_VECTOR { $$ = new std::vector<ColumnDescriptor>(1, ColumnDescriptor($1, ValueType::VARCHAR, atoi($4)));
                                                                 $$->insert($$->end(), $7->begin(), $7->end()); free($1); }
            | IDENTIFIER INT                     { $$ = new std::vector<ColumnDescriptor>(1, ColumnDescriptor($1, ValueType::INT, 9));
                                                   free($1); }
            | IDENTIFIER DOUBLE                  { $$ = new std::vector<ColumnDescriptor>(1, ColumnDescriptor($1, ValueType::DOUBLE, 10)); 
                                                   free($1); }
            | IDENTIFIER VARCHAR '(' INT_NUM ')' { $$ = new std::vector<ColumnDescriptor>(1, ColumnDescriptor($1, ValueType::VARCHAR, atoi($4))); free($1); }
            ;
COND_VECTOR : IDENTIFIER OP INT_NUM    { $$ = new std::vector<Condition>(1, Condition($1, *$2, Value{ValueType::INT, $3}));
                                         free($1); free($2); free($3); }
            | IDENTIFIER OP DOUBLE_NUM { $$ = new std::vector<Condition>(1, Condition($1, *$2, Value{ValueType::DOUBLE, $3})); 
                                         free($1); free($2); free($3); }
            | IDENTIFIER OP WORD       { $$ = new std::vector<Condition>(1, Condition($1, *$2, Value{ValueType::VARCHAR, $3})); 
                                         free($1); free($2); free($3); }
            | IDENTIFIER OP INT_NUM AND COND_VECTOR    { $$ = new std::vector<Condition>(1, Condition($1, *$2, Value{ValueType::INT, $3})); 
                                                         $$->insert($$->end(), $5->begin(), $5->end()); free($1); free($2); free($3); }
            | IDENTIFIER OP DOUBLE_NUM AND COND_VECTOR { $$ = new std::vector<Condition>(1, Condition($1, *$2, Value{ValueType::DOUBLE, $3})); 
                                                         $$->insert($$->end(), $5->begin(), $5->end()); free($1); free($2); free($3); }
            | IDENTIFIER OP WORD AND COND_VECTOR       { $$ = new std::vector<Condition>(1, Condition($1, *$2, Value{ValueType::VARCHAR, $3})); 
                                                         $$->insert($$->end(), $5->begin(), $5->end()); free($1); free($2); free($3); }
            ;
COL_VECTOR  : IDENTIFIER ',' COL_VECTOR { $$ = new std::vector<std::string>(1, $1); $$->insert($$->end(), $3->begin(), $3->end()); free($1); }
            | IDENTIFIER                { $$ = new std::vector<std::string>(1, $1); free($1); }
            ;
S_FIELDS    : '*' { $$ = new std::vector<std::string>(); }
            ;
I_FIELDS    : WORD                    { $$ = new Values(1, Value{ValueType::VARCHAR, $1}); free($1); }
            | INT_NUM                 { $$ = new Values(1, Value{ValueType::INT, $1});     free($1); }
            | DOUBLE_NUM              { $$ = new Values(1, Value{ValueType::DOUBLE, $1});  free($1); }
            | WORD ',' I_FIELDS       { $$ = new Values(1, Value{ValueType::VARCHAR, $1}); 
                                        $$->insert($$->end(), $3->begin(), $3->end()); free($1); }
            | INT_NUM ',' I_FIELDS    { $$ = new Values(1, Value{ValueType::INT, $1}); 
                                        $$->insert($$->end(), $3->begin(), $3->end()); free($1); }
            | DOUBLE_NUM ',' I_FIELDS { $$ = new Values(1, Value{ValueType::DOUBLE, $1});
                                        $$->insert($$->end(), $3->begin(), $3->end()); free($1); }
            ;
CREATE_T_S  : CREATE TABLE IDENTIFIER '(' NT_VECTOR ')' { $$ = new CreateTableStatement($3, *$5); delete $5; free($3); }
            ;
CREATE_I_S  : CREATE INDEX IDENTIFIER ON IDENTIFIER '(' COL_VECTOR ')' USING BTREE { $$ = new CreateIndexStatement($5, $3, *$7); delete $7; 
                                                                                     free($3); free($5); }
            | CREATE UNIQUE INDEX IDENTIFIER ON IDENTIFIER '(' COL_VECTOR ')' USING BTREE { $$ = new CreateIndexStatement($6, $4, *$8, true);
                                                                                            delete $8; free($4); free($6); }
            ;
INSERT_S    : INSERT INTO IDENTIFIER VALUES '(' I_FIELDS ')' { $$ = new InsertStatement($3, *$6); delete $6; free($3); }
            | INSERT INTO IDENTIFIER '(' COL_VECTOR ')' VALUES '(' I_FIELDS ')' { $$ = new InsertStatement($3, *$5, *$9); 
                                                                                  delete $5; delete $9; free($3); }
            ;
DELETE_S    : DELETE FROM IDENTIFIER WHERE COND_VECTOR { $$ = new DeleteStatement($3, *$5); delete $5; free($3); }
            ;
SELECT_S    : SELECT S_FIELDS FROM IDENTIFIER { $$ = new SelectStatement($4, *$2); delete $2; free($4); }
            | SELECT S_FIELDS FROM IDENTIFIER WHERE COND_VECTOR { $$ = new SelectStatement($4, *$2, *$6); delete $2; delete $6; free($4); }
            ;
EXIT_S      : EXIT { $$ = nullptr; }
            ;
STATEMENT   : SELECT_S ';'   { parsedStatement = $1; $$ = parsedStatement; }
            | INSERT_S ';'   { parsedStatement = $1; $$ = parsedStatement; }
            | CREATE_T_S ';' { parsedStatement = $1; $$ = parsedStatement; }
            | CREATE_I_S ';' { parsedStatement = $1; $$ = parsedStatement; }
            | DELETE_S ';'   { parsedStatement = $1; $$ = parsedStatement; }
            | EXIT_S         { parsedStatement = $1; $$ = parsedStatement; }
            ;
%%
